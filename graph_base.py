import copy

import cv2
import numpy as np
import open3d as o3d
import scipy
from matplotlib import pyplot as plt


def generate_circle_points(radius):
    """
    输入点的数量和半径，输出均匀覆盖的圆
    """
    if type(radius) is dict:
        radius = radius['radius']
    samples = 1000
    points = []
    phi = np.pi * (3 - np.sqrt(5))  # 黄金角

    for i in range(samples):
        theta = phi * i  # 黄金角增量
        r = np.sqrt(i / float(samples - 1))  # 根据点的序号计算半径
        x = r * np.cos(theta)  # 计算x坐标
        y = r * np.sin(theta)  # 计算y坐标
        points.append((x, y))
    points = np.array(points)

    # 使用np.zeros来创建一个新的数组，形状与points相同，但所有元素为0
    third_dimension = np.zeros((points.shape[0], 1))

    # 将points和third_dimension沿着第三个轴（axis=2）堆叠起来
    points_3d = np.concatenate((points, third_dimension), axis=1)
    return np.array(points_3d) * radius


def generate_square_points(args):
    """
    生成一组均匀分布的正方形点。

    参数:
    width, height -- 正方形的宽度和高度
    n -- 每个边上要生成的点的数量（不包括角点）

    返回:
    points -- 一个形状为 (n*n, 2) 的 NumPy 数组，其中包含正方形内的点坐标
    """
    length, width, height = args['length'], args['width'], -args['height']
    samples = 3 * max(length, width)
    # 计算正方形的四个角的坐标
    x1, y1 = - width / 2, - length / 2
    x2, y2 = width / 2, length / 2

    # 生成 x 和 y 坐标的网格
    x = np.linspace(x1, x2, samples)
    y = np.linspace(y1, y2, samples)
    X, Y = np.meshgrid(x, y)

    # 移除边界，只保留内部的点
    X = X[1:-1, 1:-1].flatten()
    Y = Y[1:-1, 1:-1].flatten()

    # 将点坐标组合成一个数组
    points = np.column_stack((X, Y))
    # 使用np.zeros来创建一个新的数组，形状与points相同，但所有元素为0
    third_dimension = np.ones((points.shape[0], 1)) * height

    # 将points和third_dimension沿着第三个轴（axis=2）堆叠起来
    points_3d = np.concatenate((points, third_dimension), axis=1)

    return points_3d


def generate_points_on_cylinder(args):
    """
    输入圆柱的半径和高度，以及采样点的数量
    """
    r, h, n, c_h = args['radius'], args['height'], 1500, args['center_height']
    # 计算每个点之间的弧长间隔，确保相邻点之间的距离相等
    arc_length_interval = 2 * np.pi * r / np.sqrt(n)

    # 初始化存储点的列表
    points = []

    # 生成点
    for i in range(n):
        # 计算当前点在圆柱坐标系中的角度
        theta = i * arc_length_interval / r

        # 计算当前点在圆柱坐标系中的坐标
        x = r * np.cos(theta)
        y = r * np.sin(theta)
        z = (i * h) / n  # 在高度方向上均匀分布

        # 将点从圆柱坐标系转换为笛卡尔坐标系
        points.append((x, y, -z))

    # 转换为 NumPy 数组并返回
    return np.array(points) + np.array([0, 0, c_h])

def read_gray_mtr():
    """
    读取包含gray_mtr变量的MAT文件
    参数：
        file_path : 文件路径
        squeeze   : 是否去除单维度（默认True）
    返回：
        gray_mtr  : 灰度矩阵数据（numpy数组）
    """
    file_path = 'dragon.mat'
    mat_data = scipy.io.loadmat(file_path)

    # 处理MATLAB与numpy的维度存储差异
    data = np.transpose(mat_data['gray_mtr'])
    data = data.T
    print(data.shape)
    # img = cv2.imread('./mouse.jpg', cv2.IMREAD_GRAYSCALE)
    # img = cv2.resize(img, (200, 200), interpolation=cv2.INTER_NEAREST)
    # _, img_bin = cv2.threshold(img, 127, 255, cv2.THRESH_BINARY)
    # data = 1 - img_bin.astype(bool)
    binary_data = np.where(data == 0, 1, 0)
    s = np.sum(binary_data)
    # 获取非零坐标 (行列格式)
    coords = np.argwhere(binary_data)

    if len(coords) == 0:
        return np.array([])  # 返回空数组表示无坐标

    # 计算几何中心
    center = np.mean(coords, axis=0)

    # 中心化坐标 (保持浮点精度)
    centered_coords = coords - center

    # 将坐标格式转换为 (x,y) 坐标系（列坐标为x，行坐标为y）
    centered_coords_3d = np.hstack((
        centered_coords[:, [1, 0]],  # 保持x,y坐标转换
        np.zeros((len(centered_coords), 1))  # 新增z维度
    )) / 70 * 50
    return centered_coords_3d

def read_stl(fname):
    # 1. 读取 STL 网格
    mesh = o3d.io.read_triangle_mesh("./3dmodel/" + fname)

    # 检查是否读取成功
    if not mesh.has_triangles():
        raise ValueError("该 STL 文件不包含三角面片")

    # 2. 法线计算（某些操作需要）
    mesh.compute_vertex_normals()

    # 3. 均匀采样点
    pcd = mesh.sample_points_poisson_disk(number_of_points=8000)

    # 4. 获取原始点坐标
    points = np.asarray(pcd.points)

    # 5. 计算几何中心并居中
    center = np.mean(points, axis=0)
    points_centered = points - center

    # 6. 缩放点云到边界 ±20
    max_range = np.max(np.abs(points_centered))  # 最大绝对值（全轴中最远的点）
    scale = 25.0 / max_range                     # 目标缩放因子
    points_scaled = points_centered * scale      # 应用缩放

    # 7. 更新点云对象
    pcd.points = o3d.utility.Vector3dVector(points_scaled)
    p = np.array(pcd.points)
    p[:, 2] = -p[:, 2]
    # 8. 转为 numpy 返回
    return p + [0, 0, -26]

def generate_points_on_sphere(args):
    """
    在球面上生成均匀分布的点，使用黄金分割比例。
    参数:
    - radius: 球面的半径。
    - samples: 要生成的点的数量。
    返回:
    一个形状为 (samples, 3) 的数组，包含生成的点的笛卡尔坐标。
    """
    radius, height, samples = args['radius'], -args['height'], 2000
    points = []
    center = [0, 0, height]
    offset = 2.0 / samples
    increment = np.pi * (3.0 - np.sqrt(5.0))
    for i in range(samples):
        y = ((i * offset) - 1) + (offset / 2)
        r = np.sqrt(1 - y ** 2)
        phi = ((i + 1) % samples) * increment
        x = np.cos(phi) * r * radius
        z = np.sin(phi) * r * radius
        points.append([x, y * radius, z])
    return np.array(points) + center


def generate_points_in_sphere(radius, center, num_r, num_theta, num_phi):
    """
    生成球体内的均匀点云，不使用随机数。
    :param radius: 球半径
    :param center: 球心 (x, y, z)
    :param num_r: 半径方向分层数
    :param num_theta: θ方向（纬度）切分数
    :param num_phi: φ方向（经度）切分数
    :return: shape=(N, 3) 的 numpy 数组
    """
    center = np.array(center)
    points = []

    for i in range(1, num_r + 1):
        r = radius * (i / num_r) ** (1/3)  # 体积均匀分层
        for j in range(1, num_theta):
            theta = np.pi * j / num_theta  # θ ∈ (0, π)
            for k in range(num_phi):
                phi = 2 * np.pi * k / num_phi  # φ ∈ (0, 2π)
                x = r * np.sin(theta) * np.cos(phi)
                y = r * np.sin(theta) * np.sin(phi)
                z = r * np.cos(theta)
                points.append(center + np.array([x, y, z]))

    return np.array(points)


def generate_environment(center, r, num_obstacles):
    """
    在正方形区域内生成障碍物。
    :param center: 正方形的中心点。
    :param r: 正方形的半径。
    :param num_obstacles: 障碍物的数量。
    :return: 障碍物位置的数组。
    """
    # 生成正方形内的随机点
    points_in_square = generate_random_points_in_square(center, r, 1000)

    # 随机选择障碍物的位置
    obstacle_indices = np.random.choice(1000, num_obstacles, replace=False)
    obstacles = points_in_square[obstacle_indices]

    # 为每个障碍物生成圆柱体内的点
    obstacles_in_cylinder = []
    for i, obstacle in enumerate(obstacles):
        obstacles_in_cylinder += ((generate_points_on_cylinder(1, 10, 300) + obstacle).tolist())

    return np.array(obstacles_in_cylinder)


def generate_random_points_in_square(center, r, num_points):
    """
    生成正方形区域内的随机点。
    :param center: 正方形的中心点。
    :param r: 正方形的半径。
    :param num_points: 要生成的点的数量。
    :return: 点的数组。
    """
    # 正方形的边长为 2r
    square_side = 2 * r
    # 生成随机点
    points = np.random.rand(num_points, 2) * square_side - r
    points[:, 1] += center[1]  # 调整 y 坐标以考虑正方形中心
    points[:, 0] += center[0]  # 调整 x 坐标以考虑正方形中心
    # 将所有点的第三维设置为0
    points = np.hstack((points, np.zeros((num_points, 1))))
    points[:, 2] += center[2]
    return points

def generate_cube():
    points = []
    # 计算每个小立方体的边长
    for i in range(-9, 9):
        for j in range(-9, 9):
            for k in range(-9, 9):
                points.append([i,j,k])
    return np.array(points)

def generate_dna(args):
    return np.array(
        [(3, -2, 2), (3, -2, 3), (2, -2, 4), (-2, -2, -4), (-2, -2, -3), (-3, -2, -3), (3, -1, 3), (2, -1, 3),
         (2, -1, 4), (2, 0, 4), (3, -1, 2), (3, 0, 3), (2, 0, 3), (2, 1, 4), (2, 1, 3), (1, 1, 4), (1, 2, 4), (1, 2, 5),
         (1, 1, 5), (3, 0, 4), (3, 1, 4), (2, 1, 5), (2, 2, 5), (0, 2, 5), (0, 2, 4), (1, 3, 4), (0, 3, 4), (0, 3, 5),
         (1, 2, 6), (0, 4, 5), (-1, 4, 4), (-1, 5, 4), (-2, 5, 4), (-2, 6, 3), (-3, 6, 3), (-3, 7, 3), (-1, 4, 5),
         (-1, 5, 5), (-2, 5, 5), (-2, 6, 4), (-4, 7, 3), (-4, 7, 2), (-4, 8, 2), (-4, 7, 1), (-4, 8, 1), (-2, 5, 3),
         (-3, 6, 4), (-3, 7, 2), (-5, 7, 1), (-5, 8, 1), (-5, 8, 0), (-5, 9, 0), (-5, 9, -1), (-4, 9, -1), (-5, 10, -2),
         (-5, 9, -2), (-4, 9, -2), (-4, 9, -3), (-4, 10, -3), (-3, 10, -3), (-3, 11, -3), (-4, 10, -2), (-4, 11, -3),
         (-3, 10, -4), (-2, 10, -4), (-2, 11, -4), (-2, 12, -4), (-1, 11, -4), (-1, 12, -4), (0, 11, -4), (0, 12, -4),
         (0, 11, -5), (0, 12, -5), (1, 12, -5), (1, 13, -5), (1, 13, -6), (2, 14, -6), (3, 14, -5), (2, 14, -5),
         (3, 14, -4), (4, 15, -4), (4, 15, -3), (4, 16, -3), (4, 15, -2), (2, 13, -5), (4, 16, -2), (4, 14, -4),
         (4, 14, -3), (3, 16, -2), (3, 16, -1), (3, 16, 0), (3, 17, -1), (2, 17, -1), (2, 18, -1), (2, 19, 0),
         (4, 16, -1), (3, 17, 0), (3, 18, 0), (2, 18, 1), (2, 19, 1), (3, 18, 1), (3, 19, 1), (2, 20, 1), (4, 17, -2),
         (3, 17, -2), (1, 20, 1), (1, 21, 1), (0, 20, 2), (0, 21, 2), (1, 22, 2), (0, 22, 2), (-1, 22, 2), (-1, 23, 2),
         (0, 23, 2), (0, 13, -5), (-1, 12, -5), (-4, 10, -4), (-3, 11, -4), (-1, 13, -4), (-4, 11, -4), (1, 19, 0),
         (2, 20, 2), (3, 19, 2), (2, 19, 2), (1, 20, 2), (-3, -1, -2), (-3, -1, -3), (-2, -1, -3), (-3, 0, -3),
         (-2, 0, -3), (-3, -1, -4), (-3, 0, -4), (-1, 0, -3), (-1, 1, -3), (-2, -1, -4), (-2, 0, -4), (-2, 1, -4),
         (-1, 2, -3), (0, 2, -3), (0, 3, -3), (3, 6, 0), (4, 6, 0), (4, 7, 0), (-1, 2, -4), (0, 2, -4), (0, 3, -4),
         (1, 3, -3), (1, 4, -3), (1, 3, -4), (1, 4, -4), (2, 4, -3), (2, 5, -3), (3, 4, -3), (3, 4, -2), (3, 5, -2),
         (4, 5, -2), (4, 5, -1), (3, 6, -1), (4, 6, -1), (4, 7, 1), (4, 8, 1), (5, 7, 1), (5, 8, 1), (5, 8, 2),
         (5, 9, 2), (5, 9, 3), (5, 10, 3), (4, 9, 3), (4, 10, 3), (4, 11, 3), (4, 11, 4), (4, 12, 4), (3, 11, 3),
         (3, 12, 3), (3, 11, 4), (3, 12, 4), (3, 13, 4), (3, 5, -3), (2, 5, -2), (2, 13, 5), (2, 14, 5), (3, 13, 5),
         (5, 10, 4), (5, 11, 4), (4, 12, 5), (-1, 15, 5), (-1, 16, 5), (-2, 17, 4), (-2, 18, 4), (-3, 18, 4),
         (-3, 18, 3), (-3, 19, 3), (-3, 18, 2), (-3, 19, 2), (-3, 20, 2), (-4, 20, 2), (-4, 20, 1), (-4, 21, 1),
         (-5, 21, 1), (-5, 21, 0), (-5, 21, -1), (-4, 21, -1), (-4, 22, -1), (-4, 22, -2), (-3, 22, -2), (-3, 23, -2),
         (-2, 23, -3), (-2, 24, -3), (-1, 24, -3), (-1, 24, -4), (-3, 22, -3), (-3, 23, -3), (-2, 23, -4), (-3, 23, -4),
         (-4, 22, -3), (-4, 23, -3), (-5, 22, -2), (-5, 21, -2), (-5, 20, 2), (-5, 21, 2), (-4, 19, 2), (-4, 19, 3),
         (-4, 18, 4), (-2, 18, 5), (-3, 18, 5), (-4, 19, 4), (-2, 17, 5), (-1, 17, 5), (-1, 16, 6), (-1, 17, 6),
         (0, 16, 6), (1, 15, 6), (2, 15, 6), (2, 14, 6), (3, 13, 6), (3, 14, 6), (0, 15, 6), (0, 15, 7), (-1, 15, 7),
         (-1, 16, 7), (1, 15, 7), (0, 16, 7), (2, 15, 7), (2, 14, 7), (-1, 24, 2), (-1, 24, 3), (0, 23, 3), (-1, 23, 3),
         (0, 3, 3), (0, 3, 2), (1, 3, 3), (1, 3, 2), (1, 3, 1), (0, 3, 1), (1, 3, 0), (0, 3, 0), (1, 3, -1), (0, 3, -1),
         (0, 3, -2), (1, 3, -2), (-2, 11, -3), (-2, 11, -2), (-1, 11, -2), (-1, 11, -1), (-1, 11, 0), (-2, 11, -1),
         (0, 11, 0), (0, 11, -1), (1, 11, 0), (1, 11, 1), (1, 11, 2), (2, 11, 1), (2, 11, 2), (3, 11, 2), (3, 11, 1),
         (2, -2, 2), (2, -2, 3), (1, -2, 2), (0, -2, 2), (1, -2, 1), (0, -2, 1), (1, -2, 0), (0, -2, 0), (-1, -2, 0),
         (-1, -2, -1), (-2, -2, -2), (-3, -2, -2), (-2, -2, -1), (-3, -2, -1), (-2, -2, 0), (-1, -2, 1), (-1, 24, -2),
         (-2, 24, -2), (-2, 24, -1), (-1, 24, -1), (-2, 24, 0), (-1, 24, 0), (-2, 24, 1), (-1, 24, 1), (-2, 24, 2),
         (-2, 24, 3), (-3, 20, 1), (2, 17, 0), (0, 20, 1), (1, 18, 0), (1, 18, 1), (0, 18, 1), (0, 18, 0), (-1, 18, 1),
         (-1, 18, 0), (-2, 18, 1), (-2, 18, 3), (-3, 18, 1), (-2, 18, 0), (-3, 18, 0), (1, 18, 2), (0, 18, 2),
         (-2, 18, 2), (-1, 18, 2)]) - np.array([0, 10, 10])

def generate_sanye():
    sanye =  np.array(
        [[0, -2, 0], [0, -1, 0], [0, -2, -1], [0, -1, -1], [0, 0, -1], [0, 0, 0], [0, 1, 0], [0, 1, -1], [0, 2, 0],
         [0, 2, 1], [0, 3, 0], [0, 3, 1], [0, 4, 0], [0, 4, 1], [0, 5, 0], [0, 5, 1], [0, 6, 0], [0, 6, 1], [0, 7, 1],
         [0, 7, 2], [0, 8, 2], [0, 8, 1], [0, 9, 2], [0, 10, 2], [0, 9, 1], [0, 10, 1], [0, 11, 2], [0, 11, 1],
         [0, 12, 1], [0, 12, 2], [0, 13, 1], [0, 13, 2], [0, 14, 2], [0, 14, 1], [0, 15, 2], [0, 15, 1], [0, -2, -2],
         [0, -1, -2], [0, 0, -2], [0, 1, -2], [0, 2, -1], [0, 3, -1], [0, 4, -1], [0, 5, -1], [0, 6, -1], [0, 7, 0],
         [0, 8, 0], [0, 9, 0], [0, 10, 0], [0, 11, 0], [0, 12, 0], [0, 13, 0], [0, 14, 0], [0, 15, 0], [0, 16, 1],
         [0, 16, 2], [0, 16, 3], [0, 17, 3], [0, 17, 1], [0, 17, 2], [0, 18, 1], [0, 18, 2], [0, 19, 2], [0, 18, 3],
         [0, 19, 3], [0, 20, 3], [0, 20, 2], [0, 19, 1], [0, 20, 1], [0, 21, 3], [0, 21, 2], [0, 21, 1], [0, 22, 1],
         [0, 22, 2], [0, 22, 3], [0, 23, 3], [0, 23, 2], [0, 23, 4], [0, 24, 4], [0, 24, 2], [0, 24, 3], [0, 25, 3],
         [0, 25, 4], [0, 25, 5], [0, 26, 3], [0, 26, 4], [0, 26, 5], [0, 27, 4], [0, 27, 5], [0, 27, 6], [0, 28, 5],
         [0, 29, 5], [0, 28, 6], [0, 29, 6], [0, 30, 5], [0, 30, 4], [0, 30, 3], [0, 30, 2], [0, 30, 1], [0, 31, 1],
         [0, 30, 0], [0, 30, -1], [0, 30, -2], [0, 29, -1], [0, 29, -2], [0, 29, -3], [0, 28, -3], [0, 28, -2],
         [0, 27, -3], [0, 27, -2], [0, 27, -4], [0, 28, -4], [0, 29, -4], [0, 29, -5], [0, 28, -5], [0, 27, -5],
         [0, 29, -6], [0, 26, -2], [0, 26, -3], [0, 28, -1], [0, 27, -1], [0, 26, -4], [0, 26, -5], [0, 25, -3],
         [0, 25, -4], [0, 25, -5], [0, 29, 0], [0, 28, 0], [0, 24, -5], [0, 24, -4], [0, 23, -4], [0, 23, -5],
         [0, 24, -3], [0, 23, -6], [0, 24, -6], [0, 24, -7], [0, 26, -6], [0, 25, -6], [0, 25, -7], [0, 26, -7],
         [0, 27, -6], [0, 28, -6], [0, 28, -7], [0, 29, -7], [0, 27, -7], [0, 32, -7], [0, 32, -6], [0, 32, -5],
         [0, 32, -4], [0, 31, -3], [0, 31, -2], [0, 31, -1], [0, 32, -1], [0, 31, 0], [0, 33, -1], [0, 32, -3],
         [0, 33, -2], [0, 33, -3], [0, 33, -5], [0, 33, -4], [0, 33, -7], [0, 33, -6], [0, 32, -2], [0, 31, 4],
         [0, 31, 3], [0, 32, 3], [0, 31, 2], [0, 32, 1], [0, 32, 0], [0, 33, 0], [0, 32, 2], [0, 34, -6], [0, 34, -5],
         [0, 34, -4], [0, 35, -4], [0, 34, -2], [0, 34, -1], [0, 35, -1], [0, 34, -3], [0, 35, -5], [0, 36, -4],
         [0, 35, -3], [0, 35, -2], [0, 36, -3], [0, 36, -2], [0, 36, -1], [0, 34, 0], [0, 35, 0], [0, 33, 2],
         [0, 33, 1], [0, 34, 1], [0, 35, -6], [0, 31, -4], [0, 29, 1], [0, 29, 2], [0, 27, -8], [0, 26, -8],
         [0, 28, -8], [0, 30, 6], [0, 31, 6], [0, 32, 6], [0, 33, 6], [0, 34, 6], [0, 35, 6], [0, 36, 6], [0, 37, 6],
         [0, 38, 6], [0, 39, 6], [0, 40, 6], [0, 41, 6], [0, 33, 5], [0, 34, 5], [0, 35, 5], [0, 36, 5], [0, 37, 5],
         [0, 39, 5], [0, 38, 5], [0, 38, 4], [0, 37, 4], [0, 36, 4], [0, 35, 4], [0, 36, 3], [0, 37, 3], [0, 38, 3],
         [0, 39, 4], [0, 37, 2], [0, 38, 2], [0, 39, 3], [0, 41, 5], [0, 40, 5], [0, 41, 4], [0, 40, 4], [0, 40, 3],
         [0, 39, 2], [0, 42, 5], [0, 42, 4], [0, 42, 3], [0, 42, 2], [0, 41, 3], [0, 40, 2], [0, 41, 2], [0, 42, 1],
         [0, 41, 1], [0, 39, 1], [0, 40, 1], [0, 38, 1], [0, 40, 0], [0, 41, 0], [0, 42, 0], [0, 39, 0], [0, 39, -1],
         [0, 40, -1], [0, 41, -1], [0, 42, -1], [0, 41, -2], [0, 40, -2], [0, 43, 0], [0, 43, 1], [0, 43, 2],
         [0, 43, 3], [0, 43, 4], [0, 43, 5], [0, 44, 1], [0, 44, 2], [0, 44, 3], [0, 44, 4], [0, 45, 3], [0, 45, 4],
         [0, 44, 5], [0, 42, 6], [0, 41, 7], [0, 42, 7], [0, 43, 6], [0, 40, 7], [0, 39, 8], [0, 40, 8], [0, 39, 7],
         [0, 37, 7], [0, 38, 7], [0, 36, 7], [0, 35, 7], [0, 34, 7], [0, 31, 7], [0, 33, 7], [0, 32, 7], [0, 29, 7],
         [0, 30, 7], [0, 31, 8], [0, 32, 8], [0, 33, 8], [0, 34, 8], [0, 35, 8], [0, 36, 8], [0, 37, 8], [0, 38, 8],
         [0, 40, 9], [0, 40, 10], [0, 41, 10], [0, 41, 11], [0, 42, 10], [0, 42, 11], [0, 41, 9], [0, 43, 10],
         [0, 43, 11], [0, 44, 11], [0, 44, 12], [0, 42, 12], [0, 43, 12], [0, 44, 13], [0, 43, 13], [0, 45, 14],
         [0, 45, 12], [0, 46, 14], [0, 45, 13], [0, 46, 13], [0, 46, 12], [0, 45, 11], [0, 43, 14], [0, 44, 14],
         [0, 42, 13], [0, 44, 15], [0, 45, 15], [0, 38, 9], [0, 39, 9], [0, 38, 10], [0, 39, 10], [0, 39, 11],
         [0, 40, 11], [0, 40, 12], [0, 41, 12], [0, 41, 13], [0, 41, 14], [0, 42, 14], [0, 43, 15], [0, 41, 15],
         [0, 35, 9], [0, 36, 9], [0, 37, 9], [0, 36, 10], [0, 37, 10], [0, 33, 9], [0, 34, 9], [0, 34, 10], [0, 35, 10],
         [0, 35, 11], [0, 36, 11], [0, 37, 11], [0, 38, 11], [0, 38, 12], [0, 39, 12], [0, 42, 15], [0, 40, 13],
         [0, 40, 14], [0, 39, 13], [0, 37, 12], [0, 36, 12], [0, 37, 13], [0, 38, 13], [0, 43, 16], [0, 42, 16],
         [0, 41, 16], [0, 40, 15], [0, 39, 14], [0, 38, 14], [0, 39, 15], [0, 40, 16], [0, 42, 17], [0, 41, 17],
         [0, 40, 17], [0, 39, 16], [0, 44, 16], [0, 29, 8], [0, 28, 7], [0, 28, 8], [0, 29, 9], [0, 28, 9], [0, 29, 10],
         [0, 28, 10], [0, 30, 10], [0, 30, 11], [0, 31, 11], [0, 30, 12], [0, 31, 12], [0, 32, 12], [0, 31, 13],
         [0, 32, 13], [0, 30, 13], [0, 28, 11], [0, 29, 11], [0, 29, 12], [0, 29, 13], [0, 28, 12], [0, 28, 13],
         [0, 27, 9], [0, 27, 11], [0, 27, 10], [0, 27, 13], [0, 26, 11], [0, 27, 12], [0, 26, 12], [0, 26, 13],
         [0, 26, 14], [0, 25, 14], [0, 25, 15], [0, 24, 15], [0, 24, 16], [0, 24, 17], [0, 24, 18], [0, 23, 18],
         [0, 23, 19], [0, 23, 20], [0, 23, 21], [0, 22, 21], [0, 22, 22], [0, 32, 14], [0, 32, 15], [0, 33, 14],
         [0, 33, 15], [0, 33, 16], [0, 34, 16], [0, 33, 17], [0, 34, 17], [0, 35, 17], [0, 35, 18], [0, 35, 19],
         [0, 35, 20], [0, 36, 20], [0, 36, 19], [0, 36, 21], [0, 35, 21], [0, 37, 20], [0, 23, 22], [0, 23, 23],
         [0, 24, 23], [0, 44, 10], [0, 42, 9], [0, 43, 9], [0, 24, 22], [0, 24, 21], [0, 24, 20], [0, 24, 19],
         [0, 25, 24], [0, 26, 24], [0, 25, 23], [0, 25, 22], [0, 25, 21], [0, 25, 16], [0, 25, 17], [0, 25, 18],
         [0, 25, 19], [0, 25, 20], [0, 26, 21], [0, 26, 20], [0, 26, 19], [0, 26, 18], [0, 26, 17], [0, 26, 16],
         [0, 26, 15], [0, 27, 14], [0, 27, 16], [0, 27, 18], [0, 27, 15], [0, 27, 17], [0, 27, 19], [0, 27, 20],
         [0, 27, 21], [0, 27, 24], [0, 28, 24], [0, 28, 25], [0, 28, 26], [0, 27, 25], [0, 26, 22], [0, 27, 22],
         [0, 26, 23], [0, 27, 23], [0, 36, 22], [0, 35, 22], [0, 35, 23], [0, 34, 23], [0, 34, 22], [0, 34, 24],
         [0, 33, 23], [0, 33, 22], [0, 34, 21], [0, 33, 21], [0, 32, 16], [0, 32, 17], [0, 32, 18], [0, 33, 18],
         [0, 34, 18], [0, 34, 19], [0, 34, 20], [0, 33, 20], [0, 33, 19], [0, 32, 19], [0, 30, 14], [0, 31, 14],
         [0, 29, 14], [0, 28, 14], [0, 28, 15], [0, 28, 16], [0, 28, 17], [0, 29, 17], [0, 29, 16], [0, 29, 15],
         [0, 31, 15], [0, 28, 18], [0, 28, 19], [0, 28, 20], [0, 28, 21], [0, 28, 23], [0, 28, 22], [0, 36, 23],
         [0, 37, 21], [0, 37, 22], [0, 36, 24], [0, 35, 24], [0, 35, 25], [0, 34, 25], [0, 33, 24], [0, 32, 20],
         [0, 32, 21], [0, 29, 18], [0, 29, 19], [0, 29, 20], [0, 29, 21], [0, 31, 16], [0, 30, 15], [0, 30, 16],
         [0, 31, 17], [0, 31, 18], [0, 31, 19], [0, 30, 17], [0, 30, 18], [0, 29, 22], [0, 29, 23], [0, 27, 26],
         [0, 28, 27], [0, 29, 26], [0, 29, 24], [0, 29, 25], [0, 26, 25], [0, 24, 24], [0, 22, 20], [0, 21, 21],
         [0, 32, 22], [0, 32, 23]]
        )
    temp = copy.deepcopy(sanye[:, 0])
    sanye[:, 0] = sanye[:, 2]
    sanye[:, 2] = temp
    # sanye[:, 2] = -sanye[:, 2]
    sanye -= np.array([4, 24, 3])
    # temp = copy.deepcopy(sanye[:, 1])
    # sanye[:, 1] = sanye[:, 0]
    # sanye[:, 0] = temp
    sanye = sanye[sanye[:, 1] >= -12]
    sanye_new = []
    for i in range(len(sanye)):
        if i > 1:
            sanye_new.append((sanye[i] + sanye[i-1]) / 2)
    sanye = np.vstack((sanye ,sanye_new))
    # sanye += np.array([0, 0, 14])
    # 提取 x, y, z 坐标
    x = sanye[:, 0]
    y = sanye[:, 1]
    z = sanye[:, 2]

    # 创建 3D 图形
    fig = plt.figure()
    ax = fig.add_subplot(111, projection='3d')

    # 绘制点
    ax.scatter(x, y, z, c='r', marker='o')

    # 设置标签
    ax.set_xlabel('X')
    ax.set_ylabel('Y')
    ax.set_zlabel('Z')

    # 设置标题
    ax.set_title("3D Points Visualization")

    # 显示图形
    # plt.show()
    # 获取每个维度的上下界
    min_x, max_x = np.min(sanye[:, 0]), np.max(sanye[:, 0])
    min_y, max_y = np.min(sanye[:, 1]), np.max(sanye[:, 1])
    min_z, max_z = np.min(sanye[:, 2]), np.max(sanye[:, 2])

    # 打印结果
    print("\n每个维度的上下界：")
    print(f"X 维度: 最小值 = {min_x}, 最大值 = {max_x}")
    print(f"Y 维度: 最小值 = {min_y}, 最大值 = {max_y}")
    print(f"Z 维度: 最小值 = {min_z}, 最大值 = {max_z}")
    return np.array(sanye)

def generate_L():
    L = np.array([[0, -2.0, 0], [0, -1, 0], [0, 0, 0], [0, 1, 0], [0, 2, 0], [0, 3, 0], [0, -1, -1], [0, 0, -1], [0, 1, -1], [0, 2, -1], [0, 3, -1], [0, -2, -2], [0, -1, -2], [0, 0, -2], [0, 1, -2], [0, 2, -2], [0, 3, -2], [0, -1, -3], [0, 0, -3], [0, 1, -3], [0, 2, -3], [0, 3, -3], [0, -2, -4], [0, -1, -4], [0, 0, -4], [0, 1, -4], [0, 2, -4], [0, 3, -4], [0, -1, -5], [0, 0, -5], [0, 1, -5], [0, 2, -5], [0, 3, -5], [0, -2, -6], [0, -1, -6], [0, 0, -6], [0, 1, -6], [0, 2, -6], [0, 3, -6], [0, -1, -7], [0, 0, -7], [0, 1, -7], [0, 2, -7], [0, 3, -7], [0, -2, -8], [0, -1, -8], [0, 0, -8], [0, 1, -8], [0, 2, -8], [0, 3, -8], [0, -1, -9], [0, 0, -9], [0, 1, -9], [0, 2, -9], [0, 3, -9], [0, -2, -10], [0, -1, -10], [0, 0, -10], [0, 1, -10], [0, 2, -10], [0, 3, -10], [0, -2, -12], [0, -1, -12], [0, 0, -12], [0, 1, -12], [0, 2, -12], [0, 3, -12], [0, -1, -11], [0, 0, -11], [0, 1, -11], [0, 2, -11], [0, -2, -1], [0, -2, -3], [0, -2, -5], [0, -2, -7], [0, -2, -9], [0, -2, -11], [0, -2, -13], [0, -2, -15], [0, -1, -13], [0, 0, -13], [0, 1, -13], [0, 2, -13], [0, 3, -13], [0, -2, -14], [0, -1, -14], [0, 0, -14], [0, 1, -14], [0, 2, -14], [0, 3, -14], [0, -1, -15], [0, 0, -15], [0, 1, -15], [0, 2, -15], [0, 3, -15], [0, -2, -17], [0, -2, -16], [0, -1, -17], [0, -1, -16], [0, 0, -16], [0, 1, -16], [0, 2, -16], [0, 3, -16], [0, 0, -17], [0, 1, -17], [0, 2, -17], [0, 3, -17], [0, -2, 1], [0, -2, 3], [0, -2, 5], [0, -2, 7], [0, -2, 9], [0, -2, 11], [0, -2, 13], [0, -2, 15], [0, -2, 17], [0, -1, 1], [0, 0, 1], [0, 1, 1], [0, 2, 1], [0, 3, 1], [0, -2, 2], [0, -1, 2], [0, 0, 2], [0, 1, 2], [0, 2, 2], [0, -1, 3], [0, 0, 3], [0, 1, 3], [0, 2, 3], [0, 3, 3], [0, 3, 2], [0, -2, 4], [0, -1, 4], [0, 0, 4], [0, 1, 4], [0, 2, 4], [0, 3, 4], [0, -1, 5], [0, 0, 5], [0, 1, 5], [0, 2, 5], [0, 3, 5], [0, -2, 6], [0, -1, 6], [0, 0, 6], [0, 1, 6], [0, 2, 6], [0, 3, 6], [0, -1, 7], [0, 0, 7], [0, 1, 7], [0, 2, 7], [0, 3, 7], [0, -2, 8], [0, -1, 8], [0, 0, 8], [0, 1, 8], [0, 2, 8], [0, 3, 8], [0, -1, 9], [0, 0, 9], [0, 1, 9], [0, 2, 9], [0, 3, 9], [0, -2, 10], [0, -1, 10], [0, 0, 10], [0, 1, 10], [0, 2, 10], [0, 3, 10], [0, -1, 11], [0, 0, 11], [0, 1, 11], [0, 2, 11], [0, 3, 11], [0, -2, 12], [0, -1, 12], [0, 0, 12], [0, 1, 12], [0, 2, 12], [0, 3, 12], [0, -1, 13], [0, 0, 13], [0, 1, 13], [0, 2, 13], [0, 3, 13], [0, -2, 14], [0, -1, 14], [0, 0, 14], [0, 1, 14], [0, 2, 14], [0, 3, 14], [0, -1, 15], [0, 0, 15], [0, 1, 15], [0, 2, 15], [0, 3, 15], [0, -1, 17], [0, 0, 17], [0, 1, 17], [0, 2, 17], [0, 3, 17], [0, -2, 16], [0, -1, 16], [0, 0, 16], [0, 1, 16], [0, 2, 16], [0, 3, 16], [0, 4, -17], [0, 4, -16], [0, 4, -15], [0, 4, -14], [0, 4, -13], [0, 4, -12], [0, 5, -17], [0, 5, -16], [0, 5, -15], [0, 5, -14], [0, 5, -13], [0, 5, -12], [0, 6, -12], [0, 6, -13], [0, 6, -14], [0, 6, -15], [0, 6, -17], [0, 6, -16], [0, 7, -17], [0, 7, -16], [0, 7, -15], [0, 7, -14], [0, 7, -13], [0, 7, -12], [0, 8, -17], [0, 8, -16], [0, 8, -15], [0, 8, -14], [0, 8, -13], [0, 8, -12], [0, 9, -17], [0, 9, -16], [0, 9, -14], [0, 9, -13], [0, 9, -12], [0, 9, -15], [0, 10, -17], [0, 10, -16], [0, 10, -15], [0, 10, -14], [0, 10, -13], [0, 10, -12], [0, 11, -17], [0, 11, -16], [0, 11, -15], [0, 11, -14], [0, 11, -13], [0, 11, -12], [0, 12, -17], [0, 12, -16], [0, 12, -15], [0, 12, -14], [0, 12, -13], [0, 12, -12], [0, 13, -17], [0, 13, -16], [0, 13, -15], [0, 13, -14], [0, 13, -13], [0, 13, -12], [0, 14, -17], [0, 14, -16], [0, 14, -15], [0, 14, -13], [0, 14, -12], [0, 14, -14], [0, 15, -17], [0, 15, -16], [0, 15, -15], [0, 15, -14], [0, 15, -13], [0, 15, -12], [0, 16, -17], [0, 16, -16], [0, 16, -15], [0, 16, -14], [0, 16, -13], [0, 16, -12], [0, 17, -17], [0, 17, -16], [0, 17, -15], [0, 17, -14], [0, 17, -13], [0, 17, -12], [0, 18, -17], [0, 18, -16], [0, 18, -15], [0, 18, -14], [0, 18, -13], [0, 18, -12], [0, 19, -17], [0, 19, -16], [0, 19, -15], [0, 19, -14], [0, 19, -13], [0, 19, -12], [0, 20, -17], [0, 20, -16], [0, 20, -15], [0, 20, -14], [0, 20, -13], [0, 20, -12], [0, 21, -17], [0, 21, -16], [0, 21, -15], [0, 21, -14], [0, 21, -13], [0, 21, -12], [0, 22, -17], [0, 22, -16], [0, 22, -15], [0, 22, -14], [0, 22, -13], [0, 22, -12], [0, 23, -17], [0, 23, -16], [0, 23, -15], [0, 23, -14], [0, 23, -13], [0, 23, -12], [0, 24, -17], [0, 24, -16], [0, 24, -15], [0, 24, -14], [0, 24, -13], [0, 24, -12], [0, 25, -17], [0, 25, -16], [0, 25, -15], [0, 25, -14], [0, 25, -13], [0, 25, -12], [0, 26, -17], [0, 26, -16], [0, 26, -15], [0, 26, -14], [0, 26, -13], [0, 26, -12], [0, 27, -17], [0, 27, -16], [0, 27, -15], [0, 27, -14], [0, 27, -13], [0, 27, -12], [0, 28, -17], [0, 28, -16], [0, 28, -15], [0, 28, -14], [0, 28, -13], [0, 28, -12], [0, 29, -17], [0, 29, -16], [0, 29, -15], [0, 29, -14], [0, 29, -13], [0, 29, -12], [0, 30, -17], [0, 30, -16], [0, 30, -15], [0, 30, -14], [0, 30, -13], [0, 30, -12], [0, 31, -17], [0, 31, -16], [0, 31, -15], [0, 31, -14], [0, 31, -13], [0, 31, -12], [0, 32, -17], [0, 32, -16], [0, 32, -15], [0, 32, -14], [0, 32, -13], [0, 32, -12], [0, 33, -17], [0, 33, -16], [0, 33, -15], [0, 33, -14], [0, 33, -13], [0, 33, -12], [0, 34, -17], [0, 34, -16], [0, 34, -15], [0, 34, -14], [0, 34, -13], [0, 34, -12], [0, 35, -17], [0, 35, -16], [0, 35, -15], [0, 35, -14], [0, 35, -13], [0, 35, -12], [0, 36, -17], [0, 36, -16], [0, 36, -15], [0, 36, -14], [0, 36, -13], [0, 36, -12], [0, 37, -17], [0, 37, -16], [0, 37, -15], [0, 37, -14], [0, 37, -13], [0, 37, -12], [0, 38, -17], [0, 38, -16], [0, 38, -15], [0, 38, -14], [0, 38, -13], [0, 38, -12], [0, 39, -17], [0, 39, -16], [0, 39, -15], [0, 39, -14], [0, 39, -13], [0, 39, -12], [0, 40, -17], [0, 40, -16], [0, 40, -15], [0, 40, -14], [0, 40, -13], [0, 40, -12], [0, 41, -17], [0, 41, -16], [0, 41, -15], [0, 41, -14], [0, 41, -13], [0, 41, -12], [0, 42, -17], [0, 42, -16], [0, 42, -15], [0, 42, -14], [0, 42, -13], [0, 42, -12], [0, 43, -17], [0, 43, -16], [0, 43, -15], [0, 43, -14], [0, 43, -13], [0, 43, -12], [0, 44, -17], [0, 44, -16], [0, 44, -15], [0, 44, -14], [0, 44, -13], [0, 44, -12], [0, 45, -17], [0, 45, -16], [0, 45, -15], [0, 45, -14], [0, 45, -13], [0, 45, -12], [0, 46, -17], [0, 46, -16], [0, 46, -15], [0, 46, -14], [0, 46, -13], [0, 46, -12], [0, 47, -17], [0, 47, -16], [0, 47, -15], [0, 47, -14], [0, 47, -13], [0, 47, -12], [0, 48, -17], [0, 48, -16], [0, 48, -15], [0, 48, -14], [0, 48, -13], [0, 48, -12], [0, 49, -17], [0, 49, -16], [0, 49, -15], [0, 49, -14], [0, 49, -13], [0, 49, -12], [0, 50, -17], [0, 50, -16], [0, 50, -15], [0, 50, -14], [0, 50, -13], [0, 50, -12], [0, 51, -17], [0, 51, -16], [0, 51, -15], [0, 51, -13], [0, 51, -12], [0, 52, -17], [0, 52, -16], [0, 52, -15], [0, 51, -14], [0, 52, -14], [0, 52, -13], [0, 52, -12], [0, 53, -17], [0, 53, -16], [0, 53, -15], [0, 53, -14], [0, 53, -13], [0, 53, -12], [0, 54, -17], [0, 54, -16], [0, 54, -15], [0, 54, -14], [0, 54, -13], [0, 54, -12], [0, 55, -17], [0, 55, -16], [0, 55, -15], [0, 55, -14], [0, 55, -13], [0, 55, -12], [0, 56, -17], [0, 56, -16], [0, 56, -15], [0, 56, -14], [0, 56, -13], [0, 56, -12], [0, 57, -17], [0, 57, -16], [0, 57, -15], [0, 57, -14], [0, 57, -13], [0, 57, -12], [0, 58, -17], [0, 58, -16], [0, 58, -15], [0, 58, -14], [0, 58, -13], [0, 58, -12], [0, 59, -17], [0, 59, -16], [0, 59, -15], [0, 59, -14], [0, 59, -13], [0, 59, -12], [0, 60, -17], [0, 60, -16], [0, 60, -15], [0, 60, -14], [0, 60, -13], [0, 60, -12], [0, 3, -11], [0, -2, 18], [0, -1, 18], [0, 0, 18], [0, 1, 18], [0, 2, 18], [0, 3, 18], [0, -2, 19], [0, -1, 19], [0, 0, 19], [0, 1, 19], [0, 2, 19], [0, 3, 19], [0, -2, 20], [0, -1, 20], [0, 0, 20], [0, 1, 20], [0, 2, 20], [0, 3, 20], [0, -2, 21], [0, -1, 21], [0, 0, 21], [0, 1, 21], [0, 2, 21], [0, 3, 21]])
    L /= 2
    temp = copy.deepcopy(L[:, 0])
    L[:, 0] = L[:, 2]
    L[:, 2] = temp
    L -= np.array([-2,10,3])
    L[:, 0] = -L[:,  0]
    L = L[L[:, 0] >= -15]
    # l_new = []
    # for i in range(len(L)):
    #     if i > 1:
    #         l_new.append((L[i] + L[i-1]) / 2)
    # L = np.vstack((L ,l_new))
    # 获取每个维度的上下界
    min_x, max_x = np.min(L[:, 0]), np.max(L[:, 0])
    min_y, max_y = np.min(L[:, 1]), np.max(L[:, 1])
    min_z, max_z = np.min(L[:, 2]), np.max(L[:, 2])

    # 打印结果
    print("\n每个维度的上下界：")
    print(f"X 维度: 最小值 = {min_x}, 最大值 = {max_x}")
    print(f"Y 维度: 最小值 = {min_y}, 最大值 = {max_y}")
    print(f"Z 维度: 最小值 = {min_z}, 最大值 = {max_z}")

    # # 创建 3D 图形
    fig = plt.figure()
    ax = fig.add_subplot(111, projection='3d')
    # 提取 x, y, z 坐标
    x = L[:, 0]
    y = L[:, 1]
    z = L[:, 2]
    # 绘制点
    ax.scatter(x, y, z, c='r', marker='o')

    # 设置标签
    ax.set_xlabel('X')
    ax.set_ylabel('Y')
    ax.set_zlabel('Z')

    # 设置标题
    ax.set_title("3D Points Visualization")

    # 显示图形
    # plt.show()
    return np.array(L)

def generate_u():
    # u = np.array([[-2, -2, 0], [-1, -2, 0], [1, -2, 0], [1, -1, 0], [0, -2, 0], [0, -1, 0], [-1, -1, 0], [-3, -2, 0], [-3, -1, 0], [-2, -1, 0], [-3, 0, 0], [-4, -2, 0], [-4, -1, 0], [-4, 0, 0], [-2, 0, 0], [0, 0, 0], [-1, 0, 0], [1, 0, 0],  [2, -1, 0], [2, 0, 0], [3, 0, 0], [-5, -2, 0], [-5, -1, 0], [-5, 0, 0], [-6, -2, 0], [-6, -1, 0], [-6, 0, 0], [-7, -2, 0], [-7, -1, 0], [-7, 0, 0], [-8, -2, 0], [-8, -1, 0], [-8, 0, 0], [-9, -2, 0], [-9, -1, 0], [-9, 0, 0],  [-10, -1, 0], [-10, 0, 0],  [-11, 0, 0], [-11, 1, 0], [-11, 2, 0], [-11, 3, 0], [-11, 4, 0], [-11, 5, 0], [-11, 6, 0], [-11, 7, 0], [-11, 8, 0], [-11, 9, 0], [-11, 10, 0], [-11, 11, 0], [-11, 12, 0], [-11, 13, 0], [-11, 14, 0], [-10, 1, 0], [-10, 2, 0], [-10, 3, 0], [-10, 4, 0], [-10, 5, 0], [-10, 6, 0], [-10, 7, 0], [-10, 8, 0], [-10, 9, 0], [-10, 10, 0], [-10, 11, 0], [-10, 12, 0], [-10, 13, 0], [-10, 14, 0], [-12, 1, 0], [-12, 2, 0], [-12, 3, 0], [-12, 4, 0], [-12, 5, 0], [-12, 6, 0], [-12, 7, 0], [-12, 8, 0], [-12, 9, 0], [-12, 10, 0], [-12, 11, 0], [-12, 12, 0], [-12, 14, 0], [-12, 13, 0], [4, 1, 0], [4, 2, 0], [4, 3, 0], [4, 4, 0], [4, 5, 0], [4, 6, 0], [4, 7, 0], [4, 8, 0], [4, 9, 0], [4, 10, 0], [4, 11, 0], [4, 12, 0], [4, 13, 0], [4, 14, 0], [3, 1, 0], [3, 2, 0], [3, 3, 0], [3, 4, 0], [3, 5, 0], [3, 6, 0], [2, 1, 0], [2, 2, 0], [2, 3, 0], [2, 4, 0], [2, 5, 0], [2, 6, 0], [3, 7, 0], [2, 7, 0], [3, 8, 0], [2, 8, 0], [3, 9, 0], [2, 9, 0], [2, 10, 0], [3, 10, 0], [2, 11, 0], [3, 11, 0], [3, 12, 0], [2, 12, 0], [2, 13, 0], [3, 13, 0], [3, 14, 0], [2, 14, 0], [-8, 1, 0], [-9, 1, 0], [-9, 2, 0], [0, 1, 0], [1, 1, 0], [1, 2, 0]])
    u = np.array([[1, -2, 0], [2, -2, 0], [3, -2, 0], [4, -2, 0], [5, -2, 0], [6, -2, 0], [8, -2, 0], [7, -2, 0], [9, -2, 0], [10, -2, 0], [11, -2, 0], [-1, -2, 0], [-2, -2, 0], [-3, -2, 0], [-5, -2, 0], [-6, -2, 0], [-7, -2, 0], [-8, -2, 0], [-10, -2, 0], [-11, -2, 0], [-12, -2, 0], [-9, -2, 0], [-4, -2, 0], [-12, -1, 0], [-11, -1, 0], [-12, 0, 0], [-11, 0, 0], [-12, 1, 0], [-11, 1, 0], [-11, 2, 0], [-11, 3, 0], [-10, -1, 0], [-10, 0, 0], [-10, 1, 0], [-10, 2, 0], [-10, 3, 0], [-9, -1, 0], [-9, 0, 0], [-9, 1, 0], [-9, 2, 0], [-9, 3, 0], [-8, -1, 0], [-8, 0, 0], [-8, 1, 0], [-8, 2, 0], [-8, 3, 0], [-7, -1, 0], [-7, 0, 0], [-7, 1, 0], [-7, 2, 0], [-7, 3, 0], [-6, -1, 0], [-6, 0, 0], [-6, 1, 0], [-6, 2, 0], [-6, 3, 0], [-5, -1, 0], [-5, 0, 0], [-5, 1, 0], [-5, 2, 0], [-5, 3, 0], [-4, -1, 0], [-4, 0, 0], [-4, 1, 0], [-4, 2, 0], [-4, 3, 0], [-3, -1, 0], [-3, 0, 0], [-3, 1, 0], [-3, 2, 0], [-3, 3, 0], [-2, -1, 0], [-2, 0, 0], [-2, 1, 0], [-2, 2, 0], [-1, -1, 0], [-1, 0, 0], [-1, 1, 0], [-1, 2, 0], [-1, 3, 0], [0, -2, 0], [0, -1, 0], [0, 0, 0], [0, 1, 0], [0, 2, 0], [0, 3, 0], [1, -1, 0], [1, 0, 0], [1, 1, 0], [1, 2, 0], [1, 3, 0], [2, 1, 0], [2, 2, 0], [2, 3, 0], [2, -1, 0], [2, 0, 0], [3, -1, 0], [3, 0, 0], [3, 1, 0], [3, 3, 0], [3, 2, 0], [4, -1, 0], [4, 0, 0], [4, 1, 0], [4, 2, 0], [4, 3, 0], [5, -1, 0], [5, 0, 0], [5, 1, 0], [5, 2, 0], [5, 3, 0], [6, -1, 0], [6, 0, 0], [6, 1, 0], [6, 3, 0], [6, 2, 0], [7, -1, 0], [7, 0, 0], [7, 1, 0], [7, 2, 0], [7, 3, 0], [9, -1, 0], [9, 0, 0], [8, 0, 0], [9, 1, 0], [8, 1, 0], [8, 2, 0], [8, 3, 0], [9, 2, 0], [8, -1, 0], [9, 3, 0], [10, -1, 0], [10, 0, 0], [10, 1, 0], [10, 2, 0], [10, 3, 0], [11, -1, 0], [11, 0, 0], [11, 1, 0], [11, 2, 0], [11, 3, 0], [11, 4, 0], [10, 4, 0], [9, 4, 0], [8, 4, 0], [9, 5, 0], [10, 5, 0], [11, 5, 0], [7, 4, 0], [-12, 2, 0], [-12, 3, 0], [10, 6, 0], [11, 6, 0], [12, 5, 0], [12, 6, 0], [12, 4, 0], [12, 3, 0], [12, 2, 0], [12, 1, 0], [12, -1, 0], [12, 0, 0], [10, 7, 0], [11, 7, 0], [12, 7, 0], [12, 8, 0], [11, 8, 0], [11, 9, 0], [12, 9, 0], [11, 10, 0], [12, 10, 0], [12, 11, 0], [11, 11, 0], [11, 12, 0], [12, 12, 0], [12, 13, 0], [11, 13, 0], [-13, -2, 0], [-13, -1, 0], [-13, 0, 0], [-13, 1, 0], [-13, 2, 0], [-13, 3, 0], [-14, -1, 0], [-14, 0, 0], [-14, 1, 0], [-14, 2, 0], [-14, 3, 0], [-15, 0, 0], [-15, 1, 0], [-15, 2, 0], [-15, 3, 0], [-16, 2, 0], [-16, 3, 0], [-17, 2, 0], [-17, 3, 0], [-18, 3, 0], [13, 0, 0], [13, 1, 0], [13, 2, 0], [13, 3, 0], [13, 4, 0], [13, 5, 0], [13, 6, 0], [14, 2, 0], [14, 4, 0], [14, 5, 0], [14, 6, 0], [14, 1, 0], [15, 2, 0], [14, 3, 0], [15, 3, 0], [16, 3, 0], [13, 7, 0], [14, 7, 0], [15, 4, 0], [16, 4, 0], [15, 5, 0], [15, 6, 0], [15, 7, 0], [16, 5, 0], [16, 6, 0], [16, 7, 0], [13, 8, 0], [13, 9, 0], [13, 10, 0], [13, 11, 0], [13, 12, 0], [13, 13, 0], [14, 8, 0], [15, 8, 0], [16, 8, 0], [16, 9, 0], [15, 9, 0], [14, 9, 0], [14, 10, 0], [15, 10, 0], [16, 10, 0], [16, 11, 0], [15, 11, 0], [14, 11, 0], [14, 12, 0], [15, 12, 0], [16, 12, 0], [15, 13, 0], [14, 13, 0], [16, 13, 0], [-19, 4, 0], [-18, 4, 0], [-17, 4, 0], [-16, 4, 0], [-15, 4, 0], [-14, 4, 0], [-14, 5, 0], [-14, 6, 0], [-14, 7, 0], [-14, 8, 0], [-14, 9, 0], [-14, 10, 0], [-14, 11, 0], [-14, 12, 0], [-14, 13, 0], [-14, 14, 0], [-14, 15, 0], [-14, 16, 0], [-14, 17, 0], [-14, 18, 0], [-14, 19, 0], [-14, 20, 0], [-14, 21, 0], [-14, 22, 0], [-14, 23, 0], [-14, 24, 0], [-14, 25, 0], [-14, 26, 0], [-14, 27, 0], [-14, 28, 0], [-14, 29, 0], [-14, 30, 0], [-15, 5, 0], [-15, 6, 0], [-15, 7, 0], [-15, 8, 0], [-15, 9, 0], [-15, 10, 0], [-15, 11, 0], [-16, 5, 0], [-16, 6, 0], [-16, 7, 0], [-16, 8, 0], [-18, 5, 0], [-18, 6, 0], [-17, 5, 0], [-17, 6, 0], [-17, 7, 0], [-18, 7, 0], [-18, 8, 0], [-17, 8, 0], [-19, 5, 0], [-19, 6, 0], [-19, 7, 0], [-19, 8, 0], [-19, 9, 0], [-19, 10, 0], [-17, 9, 0], [-17, 10, 0], [-16, 10, 0], [-16, 11, 0], [-18, 11, 0], [-19, 11, 0], [-18, 9, 0], [-18, 10, 0], [-16, 9, 0], [-17, 11, 0], [-16, 12, 0], [-15, 12, 0], [-17, 12, 0], [-18, 12, 0], [-19, 12, 0], [-19, 13, 0], [-19, 14, 0], [-18, 13, 0], [-18, 14, 0], [-17, 13, 0], [-17, 14, 0], [-15, 13, 0], [-15, 14, 0], [-16, 13, 0], [-16, 14, 0], [-15, 15, 0], [-16, 15, 0], [-17, 15, 0], [-18, 15, 0], [-19, 15, 0], [-19, 16, 0], [-18, 16, 0], [-17, 16, 0], [-16, 16, 0], [-15, 16, 0], [-15, 17, 0], [-16, 17, 0], [-17, 17, 0], [-18, 17, 0], [-19, 17, 0], [-19, 18, 0], [-18, 18, 0], [-17, 18, 0], [-16, 18, 0], [-15, 18, 0], [-19, 19, 0], [-18, 19, 0], [-18, 20, 0], [-16, 19, 0], [-17, 19, 0], [-16, 20, 0], [-17, 20, 0], [-15, 19, 0], [-15, 20, 0], [-15, 21, 0], [-16, 21, 0], [-17, 21, 0], [-18, 21, 0], [-19, 20, 0], [-19, 21, 0], [-15, 22, 0], [-15, 23, 0], [-15, 24, 0], [-15, 25, 0], [-15, 26, 0], [-15, 27, 0], [-15, 29, 0], [-15, 28, 0], [-16, 22, 0], [-17, 22, 0], [-16, 23, 0], [-16, 24, 0], [-17, 23, 0], [-17, 24, 0], [-16, 25, 0], [-17, 25, 0], [-16, 26, 0], [-17, 26, 0], [-16, 27, 0], [-17, 27, 0], [-16, 28, 0], [-17, 28, 0], [-17, 29, 0], [-16, 29, 0], [-15, 30, 0], [-16, 30, 0], [-17, 30, 0], [-18, 22, 0], [-19, 22, 0], [-19, 23, 0], [-19, 24, 0], [-18, 23, 0], [-18, 24, 0], [-18, 25, 0], [-18, 26, 0], [-18, 27, 0], [-18, 28, 0], [-19, 25, 0], [-19, 26, 0], [-19, 27, 0], [-19, 28, 0], [-18, 29, 0], [-19, 29, 0], [-18, 30, 0], [-19, 30, 0], [11, 14, 0], [12, 14, 0], [13, 14, 0], [14, 14, 0], [15, 14, 0], [16, 14, 0], [16, 15, 0], [15, 15, 0], [14, 15, 0], [13, 15, 0], [13, 16, 0], [12, 15, 0], [12, 16, 0], [12, 17, 0], [11, 15, 0], [11, 16, 0], [11, 17, 0], [11, 18, 0], [11, 19, 0], [12, 18, 0], [12, 19, 0], [13, 17, 0], [13, 18, 0], [13, 19, 0], [14, 16, 0], [14, 17, 0], [14, 18, 0], [14, 19, 0], [15, 16, 0], [16, 16, 0], [15, 17, 0], [16, 17, 0], [15, 18, 0], [15, 19, 0], [16, 18, 0], [16, 19, 0], [11, 20, 0], [12, 20, 0], [13, 20, 0], [15, 20, 0], [14, 20, 0], [16, 20, 0], [16, 21, 0], [16, 22, 0], [16, 23, 0], [16, 24, 0], [16, 25, 0], [15, 25, 0], [16, 26, 0], [15, 26, 0], [15, 27, 0], [15, 28, 0], [14, 28, 0], [14, 29, 0], [13, 29, 0], [14, 25, 0], [14, 26, 0], [14, 27, 0], [13, 27, 0], [12, 27, 0], [13, 28, 0], [12, 28, 0], [11, 28, 0], [15, 21, 0], [15, 22, 0], [15, 23, 0], [15, 24, 0], [14, 21, 0], [14, 22, 0], [14, 23, 0], [14, 24, 0], [13, 22, 0], [13, 23, 0], [13, 24, 0], [13, 25, 0], [13, 26, 0], [12, 26, 0], [12, 24, 0], [12, 25, 0], [12, 23, 0], [13, 21, 0], [12, 21, 0], [11, 23, 0], [11, 21, 0], [12, 22, 0], [11, 22, 0], [11, 24, 0], [11, 25, 0], [11, 26, 0], [11, 27, 0], [16, 27, 0], [16, 28, 0], [15, 29, 0], [16, 29, 0], [12, 29, 0], [11, 29, 0], [12, 30, 0], [13, 30, 0], [14, 30, 0], [15, 30, 0], [16, 30, 0], [11, 30, 0], [-12, 4, 0], [-13, 4, 0], [-13, 5, 0], [9, 6, 0], [8, 5, 0], [-13, 6, 0], [-12, 5, 0], [-11, 4, 0], [-10, 4, 0], [-11, 5, 0], [-12, 6, 0], [-13, 7, 0], [10, 8, 0], [9, 7, 0], [8, 6, 0], [7, 5, 0], [6, 4, 0], [-13, 8, 0], [-12, 7, 0], [-11, 6, 0], [-10, 5, 0], [-9, 4, 0], [-14, -2, 0], [-15, -1, 0], [-18, 2, 0], [-19, 3, 0], [-2, 3, 0], [11, 31, 0], [12, 31, 0], [13, 31, 0], [14, 31, 0], [15, 31, 0], [16, 31, 0], [16, 32, 0], [15, 32, 0], [14, 32, 0], [12, 32, 0], [13, 32, 0], [11, 32, 0], [11, 33, 0], [12, 33, 0], [13, 33, 0], [14, 33, 0], [15, 33, 0], [16, 33, 0], [-14, 31, 0], [-14, 32, 0], [-14, 33, 0], [-15, 31, 0], [-15, 32, 0], [-15, 33, 0], [-16, 31, 0], [-16, 32, 0], [-16, 33, 0], [-17, 31, 0], [-17, 32, 0], [-17, 33, 0], [-18, 31, 0], [-18, 32, 0], [-18, 33, 0], [-19, 31, 0], [-19, 32, 0], [-19, 33, 0], [15, 34, 0], [16, 34, 0], [14, 34, 0], [13, 34, 0], [11, 34, 0], [12, 34, 0], [-14, 34, 0], [-16, 34, 0], [-15, 34, 0], [-17, 34, 0], [-18, 34, 0], [-19, 34, 0], [-20, 3, 0], [-20, -1, 0], [-20, 0, 0], [-20, 1, 0], [-20, 2, 0], [-19, 0, 0], [-19, 1, 0], [-19, 2, 0], [-21, -1, 0], [-21, 0, 0], [-21, 1, 0], [-21, 2, 0], [-22, 0, 0], [-22, 1, 0], [-19, -1, 0], [-20, -2, 0], [-20, 4, 0], [-21, 3, 0], [-22, 2, 0], [-20, 5, 0], [-21, 4, 0], [-22, 3, 0], [-16, 0, 0], [-16, 1, 0], [-18, 1, 0], [-17, 1, 0], [-18, 0, 0], [-23, 2, 0], [-23, 1, 0]])
    u = u / 2
    u -= np.array([-5.5, 11, 3])
    u_new = []
    for i in range(len(u)):
        if i > 1:
            if np.linalg.norm(u[i] - u[i-1]) > 3:
                continue
            u_new.append((u[i] + u[i-1]) / 2)
    u = np.vstack((u ,u_new))
    x = u[:, 0]
    y = u[:, 1]
    z = u[:, 2]
    # 获取每个维度的上下界
    min_x, max_x = np.min(u[:, 0]), np.max(u[:, 0])
    min_y, max_y = np.min(u[:, 1]), np.max(u[:, 1])
    min_z, max_z = np.min(u[:, 2]), np.max(u[:, 2])
    # 打印结果
    print("\n每个维度的上下界：")
    print(f"X 维度: 最小值 = {min_x}, 最大值 = {max_x}")
    print(f"Y 维度: 最小值 = {min_y}, 最大值 = {max_y}")
    print(f"Z 维度: 最小值 = {min_z}, 最大值 = {max_z}")
    # # 创建 3D 图形
    fig = plt.figure()
    ax = fig.add_subplot(111, projection='3d')

    # 绘制点
    ax.scatter(x, y, z, c='r', marker='o')

    # 设置标签
    ax.set_xlabel('X')
    ax.set_ylabel('Y')
    ax.set_zlabel('Z')

    # 设置标题
    ax.set_title("3D Points Visualization")

    # # 显示图形
    # plt.show()
    return np.array(u)

def generate_c():
    # u = np.array([[-2, -2, 0], [-1, -2, 0], [1, -2, 0], [1, -1, 0], [0, -2, 0], [0, -1, 0], [-1, -1, 0], [-3, -2, 0], [-3, -1, 0], [-2, -1, 0], [-3, 0, 0], [-4, -2, 0], [-4, -1, 0], [-4, 0, 0], [-2, 0, 0], [0, 0, 0], [-1, 0, 0], [1, 0, 0],  [2, -1, 0], [2, 0, 0], [3, 0, 0], [-5, -2, 0], [-5, -1, 0], [-5, 0, 0], [-6, -2, 0], [-6, -1, 0], [-6, 0, 0], [-7, -2, 0], [-7, -1, 0], [-7, 0, 0], [-8, -2, 0], [-8, -1, 0], [-8, 0, 0], [-9, -2, 0], [-9, -1, 0], [-9, 0, 0],  [-10, -1, 0], [-10, 0, 0],  [-11, 0, 0], [-11, 1, 0], [-11, 2, 0], [-11, 3, 0], [-11, 4, 0], [-11, 5, 0], [-11, 6, 0], [-11, 7, 0], [-11, 8, 0], [-11, 9, 0], [-11, 10, 0], [-11, 11, 0], [-11, 12, 0], [-11, 13, 0], [-11, 14, 0], [-10, 1, 0], [-10, 2, 0], [-10, 3, 0], [-10, 4, 0], [-10, 5, 0], [-10, 6, 0], [-10, 7, 0], [-10, 8, 0], [-10, 9, 0], [-10, 10, 0], [-10, 11, 0], [-10, 12, 0], [-10, 13, 0], [-10, 14, 0], [-12, 1, 0], [-12, 2, 0], [-12, 3, 0], [-12, 4, 0], [-12, 5, 0], [-12, 6, 0], [-12, 7, 0], [-12, 8, 0], [-12, 9, 0], [-12, 10, 0], [-12, 11, 0], [-12, 12, 0], [-12, 14, 0], [-12, 13, 0], [4, 1, 0], [4, 2, 0], [4, 3, 0], [4, 4, 0], [4, 5, 0], [4, 6, 0], [4, 7, 0], [4, 8, 0], [4, 9, 0], [4, 10, 0], [4, 11, 0], [4, 12, 0], [4, 13, 0], [4, 14, 0], [3, 1, 0], [3, 2, 0], [3, 3, 0], [3, 4, 0], [3, 5, 0], [3, 6, 0], [2, 1, 0], [2, 2, 0], [2, 3, 0], [2, 4, 0], [2, 5, 0], [2, 6, 0], [3, 7, 0], [2, 7, 0], [3, 8, 0], [2, 8, 0], [3, 9, 0], [2, 9, 0], [2, 10, 0], [3, 10, 0], [2, 11, 0], [3, 11, 0], [3, 12, 0], [2, 12, 0], [2, 13, 0], [3, 13, 0], [3, 14, 0], [2, 14, 0], [-8, 1, 0], [-9, 1, 0], [-9, 2, 0], [0, 1, 0], [1, 1, 0], [1, 2, 0]])
    c = np.array([[0, -2, -1], [0, -2, 2], [0, -2, -2], [0, -2, 3], [0, -2, 4], [0, -2, 5], [0, -2, 6], [0, -2, 7], [0, -2, 9], [0, -2, 8], [0, -2, 10], [0, -2, 11], [0, -2, 12], [0, -2, 13], [0, -2, 14], [0, -2, 15], [0, -2, 16], [0, -2, 17], [0, -2, -3], [0, -2, -4], [0, -2, -5], [0, -2, -6], [0, -1, -6], [0, -2, -8], [0, -2, -7], [0, -2, -9], [0, -2, -10], [0, -2, -11], [0, -2, -12], [0, -2, -14], [0, -2, -13], [0, -2, 0], [0, 2, -18], [0, 3, -18], [0, 4, -18], [0, 5, -18], [0, 6, -18], [0, 7, -18], [0, 8, -18], [0, 9, -18], [0, 10, -18], [0, 11, -18], [0, 12, -18], [0, 13, -18], [0, 14, -18], [0, 16, -18], [0, 17, -18], [0, 18, -18], [0, 19, -18], [0, 20, -18], [0, 21, -18], [0, 22, -18], [0, 23, -18], [0, 24, -18], [0, 25, -18], [0, 26, -18], [0, 27, -18], [0, 28, -18], [0, 29, -18], [0, -1, -15], [0, -1, -14], [0, -1, -13], [0, 1, -17], [0, 1, -16], [0, 2, -16], [0, 3, -16], [0, 3, -15], [0, 4, -16], [0, 4, -15], [0, 0, -15], [0, 0, -14], [0, 1, -15], [0, 2, -15], [0, 1, -14], [0, 2, -14], [0, 3, -14], [0, 4, -14], [0, 3, -17], [0, 2, -17], [0, 5, -17], [0, 4, -17], [0, 0, -13], [0, 1, -13], [0, 2, -13], [0, 3, -13], [0, 4, -13], [0, 6, -17], [0, 7, -17], [0, 9, -17], [0, 10, -17], [0, 11, -17], [0, 12, -17], [0, 13, -17], [0, 13, -16], [0, 13, -15], [0, 16, -17], [0, 19, -17], [0, 18, -17], [0, 17, -17], [0, 14, -17], [0, 14, -16], [0, 14, -15], [0, 5, -15], [0, 6, -15], [0, 7, -15], [0, 8, -15], [0, 9, -15], [0, 10, -15], [0, 11, -15], [0, 12, -15], [0, 5, -16], [0, 6, -16], [0, 7, -16], [0, 8, -16], [0, 9, -16], [0, 10, -16], [0, 11, -16], [0, 8, -17], [0, 12, -16], [0, 5, -14], [0, 6, -14], [0, 7, -14], [0, 8, -14], [0, 9, -14], [0, 10, -14], [0, 11, -14], [0, 12, -14], [0, 13, -14], [0, 14, -14], [0, 16, -14], [0, 17, -14], [0, 18, -14], [0, 19, -14], [0, 20, -14], [0, 21, -14], [0, 16, -15], [0, 17, -15], [0, 18, -15], [0, 19, -15], [0, 20, -15], [0, 21, -15], [0, 20, -17], [0, 21, -17], [0, 22, -17], [0, 23, -17], [0, 16, -16], [0, 17, -16], [0, 18, -16], [0, 19, -16], [0, 20, -16], [0, 21, -16], [0, 22, -16], [0, 23, -16], [0, 24, -16], [0, 25, -17], [0, 26, -17], [0, 27, -17], [0, 28, -17], [0, 29, -17], [0, 30, -17], [0, 25, -16], [0, 26, -16], [0, 27, -16], [0, 28, -16], [0, 22, -15], [0, 23, -15], [0, 24, -15], [0, 25, -15], [0, 26, -15], [0, 27, -15], [0, 28, -15], [0, 29, -15], [0, 30, -15], [0, 31, -15], [0, 29, -16], [0, 30, -16], [0, 31, -16], [0, 32, -15], [0, 24, -17], [0, 22, -14], [0, 23, -14], [0, 24, -14], [0, 25, -14], [0, 26, -14], [0, 27, -14], [0, 28, -14], [0, 29, -14], [0, 31, -14], [0, 30, -14], [0, 33, -14], [0, 32, -14], [0, 5, -13], [0, 6, -13], [0, 7, -13], [0, 8, -13], [0, 9, -13], [0, 10, -13], [0, 11, -13], [0, 12, -13], [0, 13, -13], [0, 14, -13], [0, 16, -13], [0, 17, -13], [0, 18, -13], [0, 19, -13], [0, 20, -13], [0, 21, -13], [0, 22, -13], [0, 23, -13], [0, 24, -13], [0, 25, -13], [0, 26, -13], [0, 29, -13], [0, 30, -13], [0, 31, -13], [0, 32, -13], [0, 33, -13], [0, 33, -12], [0, 32, -12], [0, 31, -12], [0, 30, -12], [0, 29, -12], [0, 33, -11], [0, 33, -10], [0, 33, -9], [0, 33, -8], [0, 33, -7], [0, 33, -6], [0, 33, -5], [0, 33, -4], [0, 33, -3], [0, 33, -2], [0, 33, -1], [0, 33, 0], [0, 33, 1], [0, 33, 2], [0, 33, 3], [0, 33, 4], [0, 33, 5], [0, 33, 6], [0, 33, 7], [0, 33, 8], [0, 32, 8], [0, 33, 9], [0, 33, 10], [0, 33, 11], [0, 32, 11], [0, 33, 12], [0, 33, 13], [0, 33, 14], [0, 33, 15], [0, 32, 15], [0, 33, 16], [0, 33, 17], [0, 32, 18], [0, 33, 18], [0, 32, 17], [0, 32, 16], [0, 32, 12], [0, 32, 13], [0, 32, 14], [0, 32, -11], [0, 32, -10], [0, 32, -9], [0, 32, -8], [0, 32, -7], [0, 32, -6], [0, 32, -5], [0, 32, -4], [0, 32, -3], [0, 32, -2], [0, 32, -1], [0, 31, -1], [0, 32, 0], [0, 31, 0], [0, 32, 1], [0, 32, 2], [0, 32, 3], [0, 32, 4], [0, 32, 5], [0, 32, 6], [0, 32, 7], [0, 32, 10], [0, 31, 10], [0, 32, 9], [0, 31, -11], [0, 31, -10], [0, 31, -9], [0, 31, -8], [0, 31, -7], [0, 31, -6], [0, 31, -5], [0, 31, -4], [0, 31, -3], [0, 31, -2], [0, 31, 9], [0, 31, 8], [0, 31, 7], [0, 31, 6], [0, 31, 5], [0, 31, 4], [0, 31, 3], [0, 31, 2], [0, 31, 1], [0, 31, 16], [0, 31, 15], [0, 31, 14], [0, 31, 13], [0, 31, 12], [0, 31, 11], [0, 31, 18], [0, 31, 17], [0, 30, -11], [0, 30, -10], [0, 30, -9], [0, 30, -8], [0, 30, -7], [0, 30, -6], [0, 30, -5], [0, 30, -4], [0, 30, -3], [0, 30, -2], [0, 30, -1], [0, 30, 0], [0, 30, 1], [0, 30, 2], [0, 30, 3], [0, 30, 4], [0, 30, 5], [0, 30, 6], [0, 30, 7], [0, 30, 8], [0, 30, 9], [0, 30, 10], [0, 30, 11], [0, 30, 12], [0, 30, 13], [0, 30, 14], [0, 30, 15], [0, 30, 16], [0, 30, 17], [0, 30, 18], [0, 29, -11], [0, 28, -11], [0, 29, -10], [0, 28, -10], [0, 29, -9], [0, 28, -9], [0, 29, -8], [0, 28, -8], [0, 29, -7], [0, 28, -7], [0, 29, -6], [0, 28, -6], [0, 29, -5], [0, 28, -5], [0, 29, -4], [0, 28, -4], [0, 29, -3], [0, 28, -3], [0, 29, -2], [0, 28, -2], [0, 29, -1], [0, 28, -1], [0, 29, 0], [0, 28, 0], [0, 29, 1], [0, 28, 1], [0, 29, 2], [0, 28, 2], [0, 29, 3], [0, 28, 3], [0, 29, 4], [0, 28, 4], [0, 28, 5], [0, 29, 5], [0, 29, 6], [0, 28, 6], [0, 29, 7], [0, 28, 7], [0, 29, 8], [0, 28, 8], [0, 29, 9], [0, 29, 10], [0, 28, 9], [0, 28, 10], [0, 29, 11], [0, 29, 12], [0, 29, 13], [0, 29, 14], [0, 29, 15], [0, 29, 16], [0, 29, 17], [0, 28, 11], [0, 28, 12], [0, 28, 13], [0, 28, 14], [0, 28, 15], [0, 28, 16], [0, 28, 17], [0, 29, 18], [0, 28, 18], [0, 28, -13], [0, 27, -13], [0, 28, -12], [0, 27, -10], [0, 27, -11], [0, 27, -12], [0, 26, -12], [0, 25, -12], [0, 26, -11], [0, 27, -9], [0, 26, -10], [0, 25, -11], [0, 24, -12], [0, 0, -16], [0, -1, -12], [0, 0, -12], [0, 1, -12], [0, 2, -12], [0, 3, -12], [0, -1, -11], [0, 0, -11], [0, 1, -11], [0, 2, -11], [0, 3, -11], [0, -1, -10], [0, 0, -10], [0, 1, -10], [0, 2, -10], [0, 3, -10], [0, -1, -9], [0, 0, -9], [0, 1, -9], [0, 2, -9], [0, 3, -9], [0, -1, -8], [0, 0, -8], [0, 1, -8], [0, 2, -8], [0, 3, -8], [0, 0, -7], [0, 1, -7], [0, 2, -7], [0, 3, -7], [0, 0, -6], [0, 1, -6], [0, 2, -6], [0, 3, -6], [0, -1, -5], [0, 0, -5], [0, 1, -5], [0, 2, -5], [0, 3, -5], [0, -1, -4], [0, 0, -4], [0, 1, -4], [0, 2, -4], [0, 3, -4], [0, -1, -2], [0, -1, -3], [0, 0, -3], [0, 1, -3], [0, 2, -3], [0, 3, -3], [0, 0, -2], [0, 1, -2], [0, 2, -2], [0, 3, -2], [0, -1, -1], [0, 0, -1], [0, 1, -1], [0, 2, -1], [0, 3, -1], [0, -1, 0], [0, 0, 0], [0, 1, 0], [0, 2, 0], [0, 3, 0], [0, -1, 2], [0, 0, 2], [0, 1, 2], [0, 1, 1], [0, 2, 1], [0, -1, 4], [0, 2, 2], [0, 3, 1], [0, 3, 2], [0, 0, 4], [0, 1, 4], [0, -1, 3], [0, 0, 3], [0, 1, 3], [0, 2, 3], [0, 3, 3], [0, 2, 4], [0, 3, 4], [0, -1, 5], [0, 0, 5], [0, 1, 5], [0, 2, 6], [0, 2, 5], [0, 3, 5], [0, 3, 6], [0, 3, 7], [0, 3, 8], [0, 3, 9], [0, 3, 10], [0, 3, 11], [0, 3, 12], [0, 3, 13], [0, 3, 14], [0, 2, 14], [0, 2, 15], [0, 3, 15], [0, 3, 16], [0, 3, 17], [0, 2, 16], [0, 2, 17], [0, 1, 17], [0, 1, 16], [0, 1, 15], [0, 1, 14], [0, 2, 7], [0, 2, 8], [0, 2, 9], [0, 2, 10], [0, 2, 11], [0, 2, 13], [0, 2, 12], [0, 1, 8], [0, 1, 6], [0, 0, 6], [0, -1, 6], [0, -1, 7], [0, 0, 7], [0, -1, 8], [0, -1, 9], [0, 0, 8], [0, 0, 9], [0, 1, 9], [0, 1, 10], [0, 1, 11], [0, 1, 12], [0, 0, 10], [0, -1, 10], [0, 0, 11], [0, -1, 11], [0, -1, 12], [0, 0, 12], [0, -1, 13], [0, 0, 13], [0, 1, 13], [0, -1, 14], [0, 0, 14], [0, -1, 15], [0, 0, 15], [0, -1, 16], [0, 0, 16], [0, -1, 17], [0, 0, 17], [0, 1, 7], [0, -2, 1], [0, -1, 1], [0, 0, 1], [0, -1, -7], [0, 4, -12], [0, 4, -11], [0, 5, -12], [0, 6, -12], [0, 5, -11], [0, 4, -10], [0, 4, -9], [0, 5, -10], [0, 6, -11], [0, 7, -12], [0, 15, -18], [0, 15, -17], [0, 15, -16], [0, 15, -15], [0, 15, -14], [0, 15, -13], [0, 3, 18], [0, 2, 18], [0, 1, 18], [0, -1, 18], [0, 0, 18], [0, -2, 18]])
    c = c / 2
    temp = copy.deepcopy(c[:, 0])
    c[:, 0] = c[:, 2]
    c[:, 2] = temp
    c -= np.array([5, 11, 3])
    x = c[:, 0]
    y = c[:, 1]
    z = c[:, 2]
    c[:, 0] = -c[:, 0]
    c_new = []
    for i in range(len(c)):
        if i > 1:
            c_new.append((c[i] + c[i-1]) / 2)
    c = np.vstack((c ,c_new))
    # 获取每个维度的上下界
    min_x, max_x = np.min(c[:, 0]), np.max(c[:, 0])
    min_y, max_y = np.min(c[:, 1]), np.max(c[:, 1])
    min_z, max_z = np.min(c[:, 2]), np.max(c[:, 2])
    # 打印结果
    print("\n每个维度的上下界：")
    print(f"X 维度: 最小值 = {min_x}, 最大值 = {max_x}")
    print(f"Y 维度: 最小值 = {min_y}, 最大值 = {max_y}")
    print(f"Z 维度: 最小值 = {min_z}, 最大值 = {max_z}")
    # # # 创建 3D 图形
    fig = plt.figure()
    ax = fig.add_subplot(111, projection='3d')

    # 绘制点
    ax.scatter(x, y, z, c='r', marker='o')

    # 设置标签
    ax.set_xlabel('X')
    ax.set_ylabel('Y')
    ax.set_zlabel('Z')

    # 设置标题
    ax.set_title("3D Points Visualization")

    # # 显示图形
    # plt.show()
    return np.array(c)

def generate_k():
    k = np.array([[0.0, -2, -14], [0, -2, -13], [0, -2, -15], [0, -2, -17], [0, -2, -16], [0, -2, 7], [0, -2, 6], [0, -2, 5], [0, -1, -16], [0, -1, -15], [0, -1, -14], [0, -1, -13], [0, -1, -12], [0, 0, -12], [0, 1, -12], [0, 2, -12], [0, 3, -12], [0, 4, -12], [0, 5, -12], [0, 6, -12], [0, 7, -12], [0, 8, -12], [0, 9, -12], [0, 10, -12], [0, 11, -12], [0, 12, -12], [0, 13, -12], [0, 14, -12], [0, 15, -11], [0, 15, -10], [0, -1, -17], [0, 0, -17], [0, 1, -17], [0, 2, -17], [0, 3, -17], [0, 4, -17], [0, 5, -17], [0, 6, -17], [0, 7, -17], [0, 8, -17], [0, 9, -17], [0, 10, -17], [0, 11, -17], [0, 12, -17], [0, 13, -17], [0, 14, -17], [0, 16, -17], [0, 17, -17], [0, 18, -17], [0, 19, -17], [0, 20, -17], [0, 21, -17], [0, 22, -17], [0, 23, -17], [0, 24, -17], [0, 25, -17], [0, 26, -17], [0, 27, -17], [0, 28, -17], [0, 29, -17], [0, 30, -17], [0, 31, -17], [0, 32, -17], [0, 33, -17], [0, 0, -16], [0, 1, -16], [0, 2, -16], [0, 3, -16], [0, 4, -16], [0, 5, -16], [0, 6, -16], [0, 7, -16], [0, 8, -16], [0, 9, -16], [0, 10, -16], [0, 11, -16], [0, 13, -16], [0, 14, -16], [0, 12, -16], [0, 16, -16], [0, 17, -16], [0, 18, -16], [0, 19, -16], [0, 20, -16], [0, 21, -16], [0, 22, -16], [0, 23, -16], [0, 28, -16], [0, 29, -16], [0, 30, -16], [0, 31, -16], [0, 32, -16], [0, 33, -16], [0, 24, -16], [0, 25, -16], [0, 26, -16], [0, 27, -16], [0, 0, -15], [0, 1, -15], [0, 2, -15], [0, 3, -15], [0, 4, -15], [0, 5, -15], [0, 6, -15], [0, 7, -15], [0, 8, -15], [0, 9, -15], [0, 10, -15], [0, 11, -15], [0, 12, -15], [0, 13, -15], [0, 14, -15], [0, 16, -15], [0, 17, -15], [0, 18, -15], [0, 19, -15], [0, 20, -15], [0, 21, -15], [0, 22, -15], [0, 23, -15], [0, 24, -15], [0, 25, -15], [0, 26, -15], [0, 27, -15], [0, 28, -15], [0, 29, -15], [0, 30, -15], [0, 31, -15], [0, 32, -15], [0, 33, -15], [0, 0, -14], [0, 1, -14], [0, 2, -14], [0, 3, -14], [0, 4, -14], [0, 5, -14], [0, 6, -14], [0, 7, -14], [0, 8, -14], [0, 9, -14], [0, 10, -14], [0, 11, -14], [0, 12, -14], [0, 13, -14], [0, 14, -14], [0, 16, -14], [0, 17, -14], [0, 18, -14], [0, 19, -14], [0, 20, -14], [0, 21, -14], [0, 22, -14], [0, 23, -14], [0, 24, -14], [0, 25, -14], [0, 26, -14], [0, 27, -14], [0, 28, -14], [0, 29, -14], [0, 30, -14], [0, 31, -14], [0, 32, -14], [0, 33, -14], [0, 0, -13], [0, 1, -13], [0, 2, -13], [0, 3, -13], [0, 4, -13], [0, 5, -13], [0, 6, -13], [0, 7, -13], [0, 8, -13], [0, 9, -13], [0, 10, -13], [0, 11, -13], [0, 12, -13], [0, 13, -13], [0, 14, -13], [0, 16, -13], [0, 17, -13], [0, 18, -13], [0, 19, -13], [0, 20, -13], [0, 21, -13], [0, 22, -13], [0, 23, -13], [0, 24, -13], [0, 25, -13], [0, 26, -13], [0, 27, -13], [0, 28, -13], [0, 29, -13], [0, 30, -13], [0, 31, -13], [0, 32, -13], [0, 33, -13], [0, 16, -12], [0, 17, -12], [0, 18, -12], [0, 19, -12], [0, 20, -12], [0, 21, -12], [0, 22, -12], [0, 23, -12], [0, 24, -12], [0, 25, -12], [0, 26, -12], [0, 27, -12], [0, 28, -12], [0, 29, -12], [0, 30, -12], [0, 31, -12], [0, 32, -12], [0, 33, -12], [0, 15, -17], [0, 15, -16], [0, 15, -15], [0, 15, -12], [0, 15, -13], [0, 15, -14], [0, 14, -11], [0, 14, -10], [0, 17, -11], [0, 16, -11], [0, 16, -10], [0, 12, -8], [0, 11, -8], [0, 11, -7], [0, 10, -6], [0, 10, -7], [0, 13, -10], [0, 12, -9], [0, 9, -5], [0, 9, -6], [0, 8, -4], [0, 8, -5], [0, 7, -4], [0, 7, -3], [0, 6, -2], [0, 5, -2], [0, 5, -1], [0, 4, -1], [0, 4, 0], [0, 3, 0], [0, 3, 1], [0, 2, 1], [0, 2, 2], [0, 1, 2], [0, 1, 3], [0, 0, 3], [0, 0, 4], [0, -1, 4], [0, 13, -9], [0, 14, -9], [0, 15, -9], [0, 13, -8], [0, 14, -8], [0, 16, -9], [0, 12, -7], [0, 13, -7], [0, 11, -6], [0, 12, -6], [0, 10, -5], [0, 11, -5], [0, 9, -4], [0, 10, -4], [0, 8, -3], [0, 9, -3], [0, 7, -2], [0, 8, -2], [0, 6, -1], [0, 7, -1], [0, 5, 0], [0, 6, 0], [0, 4, 1], [0, 5, 1], [0, 3, 2], [0, 4, 2], [0, 2, 3], [0, 3, 3], [0, 1, 4], [0, 2, 4], [0, -1, 6], [0, -1, 5], [0, 0, 5], [0, 1, 5], [0, 0, 6], [0, 15, -8], [0, 16, -8], [0, 14, -7], [0, 15, -7], [0, 13, -6], [0, 14, -6], [0, 12, -5], [0, 13, -5], [0, 11, -4], [0, 12, -4], [0, 10, -3], [0, 11, -3], [0, 9, -2], [0, 10, -2], [0, 7, 0], [0, 8, 0], [0, 8, -1], [0, 9, -1], [0, 5, 2], [0, 6, 2], [0, 6, 1], [0, 7, 1], [0, 4, 3], [0, 5, 3], [0, 3, 4], [0, 4, 4], [0, 2, 5], [0, 3, 5], [0, 1, 6], [0, -1, 7], [0, -2, -12], [0, 19, -11], [0, 20, -11], [0, 21, -11], [0, 19, -10], [0, 20, -10], [0, 21, -10], [0, 22, -10], [0, 23, -10], [0, 22, -11], [0, 19, -9], [0, 20, -9], [0, 21, -9], [0, 22, -9], [0, 23, -9], [0, 23, -8], [0, 24, -8], [0, 24, -7], [0, 24, -6], [0, 25, -6], [0, 25, -5], [0, 25, -4], [0, 26, -4], [0, 26, -3], [0, 26, -2], [0, 27, -2], [0, 27, -1], [0, 27, 0], [0, 28, 0], [0, 28, 1], [0, 28, 2], [0, 29, 2], [0, 29, 3], [0, 29, 4], [0, 34, -17], [0, 34, -16], [0, 34, -15], [0, 34, -14], [0, 34, -13], [0, 34, -12], [0, 35, -12], [0, 35, -13], [0, 35, -14], [0, 35, -15], [0, 35, -17], [0, 35, -16], [0, 36, -17], [0, 36, -16], [0, 36, -15], [0, 36, -14], [0, 36, -13], [0, 36, -12], [0, 37, -12], [0, 37, -13], [0, 37, -14], [0, 37, -15], [0, 37, -17], [0, 37, -16], [0, 38, -17], [0, 38, -16], [0, 38, -15], [0, 38, -14], [0, 38, -13], [0, 38, -12], [0, 39, -12], [0, 39, -13], [0, 39, -15], [0, 39, -14], [0, 39, -16], [0, 39, -17], [0, 20, -8], [0, 21, -8], [0, 22, -8], [0, 23, -7], [0, 22, -7], [0, 21, -7], [0, 20, -7], [0, 19, -7], [0, 19, -8], [0, 23, -6], [0, 22, -6], [0, 21, -6], [0, 20, -6], [0, 24, -5], [0, 23, -5], [0, 22, -5], [0, 21, -5], [0, 20, -5], [0, 24, -4], [0, 23, -4], [0, 22, -4], [0, 21, -4], [0, 25, -3], [0, 24, -3], [0, 23, -3], [0, 22, -3], [0, 21, -3], [0, 25, -2], [0, 24, -2], [0, 23, -2], [0, 22, -2], [0, 26, -1], [0, 25, -1], [0, 24, -1], [0, 23, -1], [0, 22, -1], [0, 26, 0], [0, 25, 0], [0, 24, 0], [0, 23, 0], [0, 27, 1], [0, 26, 1], [0, 25, 1], [0, 24, 1], [0, 23, 1], [0, 27, 2], [0, 26, 2], [0, 25, 2], [0, 24, 2], [0, 28, 3], [0, 27, 3], [0, 26, 3], [0, 25, 3], [0, 24, 3], [0, 28, 4], [0, 27, 4], [0, 26, 4], [0, 25, 4], [0, 29, 5], [0, 28, 5], [0, 27, 5], [0, 26, 5], [0, 25, 5], [0, 29, 6], [0, 28, 6], [0, 27, 6], [0, 26, 6], [0, 28, 7], [0, 27, 7], [0, 30, 4], [0, 30, 5], [0, 17, -10], [0, 6, -3], [0, 17, -9], [0, 18, -10], [0, 18, -11], [0, -2, 8], [0, 0, 7], [0, -1, 8], [0, 1, 7], [0, 0, 8], [0, 1, 8], [0, 2, 6], [0, 29, 7], [0, 30, 6], [0, 31, 6], [0, 30, 7], [0, 31, 7], [0, 31, 8], [0, 32, 8], [0, 30, 8], [0, 29, 8], [0, 28, 8], [0, 27, 8], [0, 26, 7], [0, 31, 9], [0, 30, 9], [0, 29, 9], [0, 28, 9], [0, 30, 10], [0, 29, 10], [0, 40, -12], [0, 40, -13], [0, 40, -14], [0, 40, -15], [0, 40, -16], [0, 40, -17], [0, 41, -12], [0, 41, -13], [0, 41, -14], [0, 41, -15], [0, 41, -16], [0, 41, -17], [0, 42, -12], [0, 42, -13], [0, 42, -14], [0, 42, -15], [0, 42, -16], [0, 42, -17]])
    k /= 1.35
    temp = copy.deepcopy(k[:, 0])
    k[:, 0] = -k[:, 2]
    k[:, 2] = temp
    k -= np.array([0, 11, 3])
    k_new = []
    # for i in range(len(k)):
    #     if i > 1:
    #         if np.linalg.norm(k[i] - k[i-1]) > 3:
    #             continue
    #         k_new.append((k[i] + k[i-1]) / 2)
    # k = np.vstack((k ,k_new))
    k = k[k[:, 0] > -7.5]
    k = k[k[:, 0] < 16]
    # k = k[k[:, 2] < 15]
    x = k[:, 0]
    y = k[:, 1]
    z = k[:, 2]
    # 获取每个维度的上下界
    min_x, max_x = np.min(k[:, 0]), np.max(k[:, 0])
    min_y, max_y = np.min(k[:, 1]), np.max(k[:, 1])
    min_z, max_z = np.min(k[:, 2]), np.max(k[:, 2])
    # 打印结果
    print("\n每个维度的上下界：")
    print(f"X 维度: 最小值 = {min_x}, 最大值 = {max_x}")
    print(f"Y 维度: 最小值 = {min_y}, 最大值 = {max_y}")
    print(f"Z 维度: 最小值 = {min_z}, 最大值 = {max_z}")
    # # 创建 3D 图形
    fig = plt.figure()
    ax = fig.add_subplot(111, projection='3d')

    # 绘制点
    ax.scatter(x, y, z, c='r', marker='o')

    # 设置标签
    ax.set_xlabel('X')
    ax.set_ylabel('Y')
    ax.set_zlabel('Z')

    # 设置标题
    ax.set_title("3D Points Visualization")

    # 显示图形
    # plt.show()
    return np.array(k)


def square(length, width):
    graph = []
    # 使用两层循环生成8乘12的格点
    for x in range(length):
        for y in range(width):
            # 每个格点的第三维为0
            graph.append((x * 0.5, y * 0.5, 0))
    return np.array(graph)

def fibonacci_sphere(radius, samples=1):
    """
    在球面上生成均匀分布的点，使用黄金分割比例。
    参数:
    - radius: 球面的半径。
    - samples: 要生成的点的数量。
    返回:
    一个形状为 (samples, 3) 的数组，包含生成的点的笛卡尔坐标。
    """
    points = []
    offset = 2.0 / samples
    increment = np.pi * (3.0 - np.sqrt(5.0))
    for i in range(samples):
        y = ((i * offset) - 1) + (offset / 2)
        r = np.sqrt(1 - y ** 2)
        phi = ((i + 1) % samples) * increment
        x = np.cos(phi) * r * radius
        z = np.sin(phi) * r * radius
        points.append([x, y * radius, z])
    return np.array(points)


if __name__ == '__main__':
    graph = read_stl('line_sphere.stl')
    with open('./data/graph1.json', 'w+') as f:
        f.write(str(graph.tolist()))
    graph = fibonacci_sphere(30, 4000)
    with open('./data/graph2.json', 'w+') as f:
        f.write(str(graph.tolist()))
    graph = generate_points_in_sphere(radius=30,
    center=(0, 0, 0),
    num_r=10,
    num_theta=35,
    num_phi=100)
    with open('./data/graph3.json', 'w+') as f:
        f.write(str(graph.tolist()))
    graph = read_gray_mtr()
    with open('./data/dragon.json', 'w+') as f:
        f.write(str(graph.tolist()))

